#!/usr/bin/perl
# Sync git repository to s3 bucket.

use strict;
use warnings;

# Core modules
require Cwd;
require File::Basename;
require File::Spec;
require Getopt::Long;
require Pod::Usage;
require Term::ANSIColor;

use constant DEBUG => 0;

# Extra modules
require JSON;

sub _debug {
    if (DEBUG) {
        print(@_);
    }
}
sub _error {
    print Term::ANSIColor::colored(["Bold Red"], shift() . "\n");
}
sub _info {
    print Term::ANSIColor::colored(["Bold"], shift() . "\n");
}

my $cfg = {};
my $cwd = Cwd::getcwd();

if (!Getopt::Long::GetOptions(
    "c|config=s"     => \$cfg->{configfn},
    "r|repository=s" => \$cfg->{repo},
    "h|help"         => \$cfg->{help},
)) {
    print("Error in command line arguments\n");
    Pod::Usage::pod2usage(1);
    exit 1;
}

if ($cfg->{help}) {
    Pod::Usage::pod2usage(1);
    exit 0;
}

if (! $cfg->{repo}) {
    _info("No repository defined, use git directory base instead");
    my $gitpath = qx(git rev-parse --show-toplevel);
    if (! $?) {
        chomp $gitpath;
        $cfg->{repo} = $gitpath;
    } else {
        _info("No repository defined, using current working directory instead");
        $cfg->{repo} = $cwd;
    }
}

if (! $cfg->{configfn}) {
    _info("No configuration file defined, using falling back to .git2s3.json instead");
    my $count = 0;
    for my $check ( map { File::Spec->catfile($_, '.git2s3.json') } ( $cfg->{repo}, $cwd, $ENV{HOME})) {
        if ( -f $check ) {
            _info("Used configuration file $check.");
            if ($count == 1) {
                _info("Since using .git2s3 from CWD, but not repository .git2s3, we use CWD as basedir for syncronization.");
                $cfg->{repo} = $cwd;
            }
            $cfg->{configfn} = $check;
            last;
        }
        $count++;
    }
    if (! $cfg->{configfn}) {
        _error("Could not find config file");
        exit 3;
    }
}

# Read target buckets and configuration for access
my $buckets;
{
    undef $/;
    open(my $fh, '<', $cfg->{configfn}) or die "Could not open config file $cfg->{configfn}: $!";
    my $json_text = <$fh>;
    my $config = JSON::decode_json($json_text);
    $buckets = $config->{buckets};
    close($fh);
}

# TODO: Check if s3cmd and git in path before using
# Get current git branch
my $branch;
{
    chdir $cfg->{repo} or die "Could not change to directory $cfg->{repo}: $!";
    $branch =substr(qx(git branch | grep ^\*), 2);
    $branch =~ s/\s+$//;
    chomp $branch;
    if (!$branch) {
        print "Could not determine git branch!\n";
        exit 2;
    }
    _debug("Branch determined: '$branch'\n");
    # Get back to original directory
    chdir $cwd;
}


my ($dirname, undef, undef) = File::Basename::fileparse($cfg->{repo});

# Try sync for each bucket
for my $bucket (@{$buckets}) {
    my $s3path = $bucket;
    my $strippedbucket = $bucket;
    $strippedbucket =~ s/\/.+//;
    my $s3cfg = sprintf('%s/.s3cfg.%s', $ENV{'HOME'}, $strippedbucket);
    if (! -f $s3cfg) {
        _error("$s3cfg does not exist or is not a file");
        exit 3;
    }
    $s3path =~ s/%branch%/$branch/;
    my $cmd = sprintf("s3cmd sync %s/ s3://%s -c %s --delete-removed --rexclude='(^\.git)'", $cfg->{repo}, $s3path, $s3cfg);
    _debug("Sync using command: $cmd\n");
    system($cmd);
}

=head1 NAME

Sync a git repository to an s3 bucket.

=head1 SYNOPSIS

  Usage: git2s3 [OPTIONS]

  OPTIONS must contain either  exactly both of the following options:
    -r --repository     The repository to sync. Will use current working
                        directory, if not set.
    -h --help           Print this help message

    {
      "buckets": [
        "mys3bucket/",
        "myseconds3bucket/my/path/%branch%/",
        "myseconds3bucket/my/path2/%branch%/"
      ]
    }

  This will sync the directory content directly to mysq3bucket/ and
  to myseconds3bucket/my/path. Contents in mys3bucket won't be branch aware.

=cut
